# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from pprint import pprint
import unittest
import pdb
import itertools
import marketcheck_api_sdk
from marketcheck_api_sdk.api.history_api import HistoryApi  # noqa: E501
from marketcheck_api_sdk.rest import ApiException


class TestHistoryApi(unittest.TestCase):
    """HistoryApi unit test stubs"""

    def setUp(self):
        self.api = marketcheck_api_sdk.api.history_api.HistoryApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_history(self):
        """Test case for history

        Get a cars online listing history  # noqa: E501
        """
        api_instance = marketcheck_api_sdk.HistoryApi()
        vins = ["1FTNE2CM2FKA81288","1GYS4BKJ8FR290257","3GYFNBE3XFS537500","1FT7W2BT5FEA75059","1FMCU9J90FUA21186"]
        fields = ["id","vin","seller_type","inventory_type","make","price","miles","scraped_at","status_date","is_searchable","seller_name","seller_name_o","domain_id","source","group_id","grouped_at zip","is_grouped","touch_count","is_duplicate","dealer_id","latitude","longitude","city state","data_source"]
        api_key = "YOUR API KEY"
        try:
            for vin in vins:
                api_response = api_instance.history(vin, api_key=api_key)
                #pprint(api_response)
                assert len(api_response) != 0
                last_seen_at_ary = []
                for history in api_response:
                    last_seen_at_ary.append(history.last_seen_at)
                assert last_seen_at_ary == sorted(last_seen_at_ary,reverse=True)
                api_response = api_instance.history(vin, api_key=api_key,fields="seller_type,inventory_type,is_searchable,dealer_id,source,data_source")
                for listing in api_response:
                    assert hasattr(listing,"source")
                    assert hasattr(listing,"data_source")
                    assert hasattr(listing,"seller_type")
                    assert hasattr(listing,"inventory_type")
                    assert hasattr(listing,"is_searchable")
                    assert hasattr(listing,"dealer_id")
        except ApiException as e:
            print("Exception when calling HistoryApi->history: %s\n" % e)
        pass


if __name__ == '__main__':
    unittest.main()
