# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import
from __future__ import division
from operator import truediv
from pprint import pprint
import unittest
import pdb
import marketcheck_api_sdk

from marketcheck_api_sdk.api.market_api import MarketApi  # noqa: E501
from marketcheck_api_sdk.rest import ApiException


class TestMarketApi(unittest.TestCase):
    """MarketApi unit test stubs"""

    def setUp(self):
        self.api = marketcheck_api_sdk.api.market_api.MarketApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_get_averages(self):
        """Test case for get_averages

        [MOCK] Get Averages for YMM  # noqa: E501
        """
        pass

    def test_get_comparison(self):
        """Test case for get_comparison

        Compare market  # noqa: E501
        """
        pass

    def test_get_competition(self):
        """Test case for get_competition

        Competitors  # noqa: E501
        """
        pass

    def test_get_depreciation(self):
        """Test case for get_depreciation

        Depreciation  # noqa: E501
        """
        pass

    def test_get_mds(self):
        """Test case for get_mds

        Market Days Supply  # noqa: E501
        """
        api_instance = marketcheck_api_sdk.MarketApi(marketcheck_api_sdk.ApiClient())
        api_key = "YOUR API KEY"
        vins =["1FTNE2CM2FKA81288","1GYS4BKJ8FR290257","3GYFNBE3XFS537500","1FT7W2BT5FEA75059","1FMCU9J90FUA21186"]
        try:
            ######  validate MDS with exact and debug #####
            for vin in vins:
                api_response = api_instance.get_mds(vin, api_key=api_key,latitude=37.998,longitude=-84.522,radius=1000,exact="true",debug=1)
                assert hasattr(api_response,"year")
                assert hasattr(api_response,"make")
                assert hasattr(api_response,"model")
                assert hasattr(api_response,"trim")
                assert api_response.mds != None
                assert api_response.mds != 0
                assert isinstance(api_response.mds, int)
                assert api_response.total_active_cars_for_ymmt != None
                assert api_response.total_active_cars_for_ymmt != 0
                assert api_response.total_cars_sold_in_last_45_days != None
                assert api_response.total_cars_sold_in_last_45_days != 0
                per_day_sold_rate = truediv(api_response.total_cars_sold_in_last_45_days,45)
                mds =  truediv(api_response.total_active_cars_for_ymmt,per_day_sold_rate)
                assert api_response.mds == int(round(mds))

            #######     validate MDS with debug and without exact   #####
            for vin in vins:
                api_response = api_instance.get_mds(vin, api_key=api_key,latitude=37.998,longitude=-84.522,radius=1000,debug=1)
                assert hasattr(api_response,"year")
                assert hasattr(api_response,"make")
                assert hasattr(api_response,"model")
                assert api_response.mds != None
                assert api_response.mds != 0
                assert isinstance(api_response.mds, int)
                assert api_response.total_active_cars_for_ymmt != None
                assert api_response.total_active_cars_for_ymmt != 0
                assert api_response.total_cars_sold_in_last_45_days != None
                assert api_response.total_cars_sold_in_last_45_days != 0
                per_day_sold_rate = truediv(api_response.total_cars_sold_in_last_45_days,45)
                mds =  truediv(api_response.total_active_cars_for_ymmt,per_day_sold_rate)
                assert api_response.mds == int(round(mds))
            ##########    validate MDS without debug and without exact   #####
            for vin in vins:
                api_response = api_instance.get_mds(vin, api_key=api_key,latitude=37.998,longitude=-84.522,radius=1000,exact="true")
                assert api_response.mds != None
                assert api_response.mds != 0
                assert isinstance(api_response.mds, int)
                assert api_response.total_active_cars_for_ymmt != None
                assert api_response.total_active_cars_for_ymmt != 0
                assert api_response.total_cars_sold_in_last_45_days != None
                assert api_response.total_cars_sold_in_last_45_days != 0
                per_day_sold_rate = truediv(api_response.total_cars_sold_in_last_45_days,45)
                mds =  truediv(api_response.total_active_cars_for_ymmt,per_day_sold_rate)
                assert api_response.mds == int(round(mds))
        except ApiException as e:
            pprint("Exception when calling DealerApi->dealer_search: %s\n" % e)
        pass

    def test_get_popularity(self):
        """Test case for get_popularity

        Popularity  # noqa: E501
        """
        pass

    def test_get_sales_count(self):
        """Test case for get_sales_count

        Get sales count by make, model, year, trim or taxonomy vin  # noqa: E501
        """
        pass

    def test_get_trends(self):
        """Test case for get_trends

        Get Trends for criteria  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
