# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from marketcheck_api_sdk.models.sales_stats import SalesStats  # noqa: F401,E501


class Sales(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counts': 'int',
        'cpo': 'int',
        'non_cpo': 'int',
        'inventory_type': 'str',
        'make': 'str',
        'model': 'str',
        'year': 'str',
        'trim': 'str',
        'taxonomy_vin': 'str',
        'state': 'str',
        'city': 'str',
        'dom_stats': 'SalesStats',
        'price_stats': 'SalesStats',
        'miles_stats': 'SalesStats'
    }

    attribute_map = {
        'counts': 'counts',
        'cpo': 'cpo',
        'non_cpo': 'non-cpo',
        'inventory_type': 'inventory_type',
        'make': 'make',
        'model': 'model',
        'year': 'year',
        'trim': 'trim',
        'taxonomy_vin': 'taxonomy_vin',
        'state': 'state',
        'city': 'city',
        'dom_stats': 'dom_stats',
        'price_stats': 'price_stats',
        'miles_stats': 'miles_stats'
    }

    def __init__(self, counts=None, cpo=None, non_cpo=None, inventory_type=None, make=None, model=None, year=None, trim=None, taxonomy_vin=None, state=None, city=None, dom_stats=None, price_stats=None, miles_stats=None):  # noqa: E501
        """Sales - a model defined in Swagger"""  # noqa: E501

        self._counts = None
        self._cpo = None
        self._non_cpo = None
        self._inventory_type = None
        self._make = None
        self._model = None
        self._year = None
        self._trim = None
        self._taxonomy_vin = None
        self._state = None
        self._city = None
        self._dom_stats = None
        self._price_stats = None
        self._miles_stats = None
        self.discriminator = None

        if counts is not None:
            self.counts = counts
        if cpo is not None:
            self.cpo = cpo
        if non_cpo is not None:
            self.non_cpo = non_cpo
        if inventory_type is not None:
            self.inventory_type = inventory_type
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if year is not None:
            self.year = year
        if trim is not None:
            self.trim = trim
        if taxonomy_vin is not None:
            self.taxonomy_vin = taxonomy_vin
        if state is not None:
            self.state = state
        if city is not None:
            self.city = city
        if dom_stats is not None:
            self.dom_stats = dom_stats
        if price_stats is not None:
            self.price_stats = price_stats
        if miles_stats is not None:
            self.miles_stats = miles_stats

    @property
    def counts(self):
        """Gets the counts of this Sales.  # noqa: E501

        Sales count  # noqa: E501

        :return: The counts of this Sales.  # noqa: E501
        :rtype: int
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Sales.

        Sales count  # noqa: E501

        :param counts: The counts of this Sales.  # noqa: E501
        :type: int
        """

        self._counts = counts

    @property
    def cpo(self):
        """Gets the cpo of this Sales.  # noqa: E501

        cpo sales count  # noqa: E501

        :return: The cpo of this Sales.  # noqa: E501
        :rtype: int
        """
        return self._cpo

    @cpo.setter
    def cpo(self, cpo):
        """Sets the cpo of this Sales.

        cpo sales count  # noqa: E501

        :param cpo: The cpo of this Sales.  # noqa: E501
        :type: int
        """

        self._cpo = cpo

    @property
    def non_cpo(self):
        """Gets the non_cpo of this Sales.  # noqa: E501

        Non-cpo sales count  # noqa: E501

        :return: The non_cpo of this Sales.  # noqa: E501
        :rtype: int
        """
        return self._non_cpo

    @non_cpo.setter
    def non_cpo(self, non_cpo):
        """Sets the non_cpo of this Sales.

        Non-cpo sales count  # noqa: E501

        :param non_cpo: The non_cpo of this Sales.  # noqa: E501
        :type: int
        """

        self._non_cpo = non_cpo

    @property
    def inventory_type(self):
        """Gets the inventory_type of this Sales.  # noqa: E501

        inventory_type  # noqa: E501

        :return: The inventory_type of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._inventory_type

    @inventory_type.setter
    def inventory_type(self, inventory_type):
        """Sets the inventory_type of this Sales.

        inventory_type  # noqa: E501

        :param inventory_type: The inventory_type of this Sales.  # noqa: E501
        :type: str
        """

        self._inventory_type = inventory_type

    @property
    def make(self):
        """Gets the make of this Sales.  # noqa: E501

        Make  # noqa: E501

        :return: The make of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Sales.

        Make  # noqa: E501

        :param make: The make of this Sales.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this Sales.  # noqa: E501

        model  # noqa: E501

        :return: The model of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Sales.

        model  # noqa: E501

        :param model: The model of this Sales.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def year(self):
        """Gets the year of this Sales.  # noqa: E501

        year  # noqa: E501

        :return: The year of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Sales.

        year  # noqa: E501

        :param year: The year of this Sales.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def trim(self):
        """Gets the trim of this Sales.  # noqa: E501

        trim  # noqa: E501

        :return: The trim of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this Sales.

        trim  # noqa: E501

        :param trim: The trim of this Sales.  # noqa: E501
        :type: str
        """

        self._trim = trim

    @property
    def taxonomy_vin(self):
        """Gets the taxonomy_vin of this Sales.  # noqa: E501

        taxonomy_vin  # noqa: E501

        :return: The taxonomy_vin of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._taxonomy_vin

    @taxonomy_vin.setter
    def taxonomy_vin(self, taxonomy_vin):
        """Sets the taxonomy_vin of this Sales.

        taxonomy_vin  # noqa: E501

        :param taxonomy_vin: The taxonomy_vin of this Sales.  # noqa: E501
        :type: str
        """

        self._taxonomy_vin = taxonomy_vin

    @property
    def state(self):
        """Gets the state of this Sales.  # noqa: E501

        State  # noqa: E501

        :return: The state of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Sales.

        State  # noqa: E501

        :param state: The state of this Sales.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def city(self):
        """Gets the city of this Sales.  # noqa: E501

        City  # noqa: E501

        :return: The city of this Sales.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Sales.

        City  # noqa: E501

        :param city: The city of this Sales.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def dom_stats(self):
        """Gets the dom_stats of this Sales.  # noqa: E501

        Days on market stats  # noqa: E501

        :return: The dom_stats of this Sales.  # noqa: E501
        :rtype: SalesStats
        """
        return self._dom_stats

    @dom_stats.setter
    def dom_stats(self, dom_stats):
        """Sets the dom_stats of this Sales.

        Days on market stats  # noqa: E501

        :param dom_stats: The dom_stats of this Sales.  # noqa: E501
        :type: SalesStats
        """

        self._dom_stats = dom_stats

    @property
    def price_stats(self):
        """Gets the price_stats of this Sales.  # noqa: E501

        Price stats  # noqa: E501

        :return: The price_stats of this Sales.  # noqa: E501
        :rtype: SalesStats
        """
        return self._price_stats

    @price_stats.setter
    def price_stats(self, price_stats):
        """Sets the price_stats of this Sales.

        Price stats  # noqa: E501

        :param price_stats: The price_stats of this Sales.  # noqa: E501
        :type: SalesStats
        """

        self._price_stats = price_stats

    @property
    def miles_stats(self):
        """Gets the miles_stats of this Sales.  # noqa: E501

        Miles stats  # noqa: E501

        :return: The miles_stats of this Sales.  # noqa: E501
        :rtype: SalesStats
        """
        return self._miles_stats

    @miles_stats.setter
    def miles_stats(self, miles_stats):
        """Sets the miles_stats of this Sales.

        Miles stats  # noqa: E501

        :param miles_stats: The miles_stats of this Sales.  # noqa: E501
        :type: SalesStats
        """

        self._miles_stats = miles_stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sales):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
