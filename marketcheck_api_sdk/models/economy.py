# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Economy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ghg_emissions_rating': 'float',
        'ghg_emissions_indicator': 'str',
        'smog_rating': 'float',
        'smog_indicator': 'str'
    }

    attribute_map = {
        'ghg_emissions_rating': 'ghg_emissions_rating',
        'ghg_emissions_indicator': 'ghg_emissions_indicator',
        'smog_rating': 'smog_rating',
        'smog_indicator': 'smog_indicator'
    }

    def __init__(self, ghg_emissions_rating=None, ghg_emissions_indicator=None, smog_rating=None, smog_indicator=None):  # noqa: E501
        """Economy - a model defined in Swagger"""  # noqa: E501

        self._ghg_emissions_rating = None
        self._ghg_emissions_indicator = None
        self._smog_rating = None
        self._smog_indicator = None
        self.discriminator = None

        if ghg_emissions_rating is not None:
            self.ghg_emissions_rating = ghg_emissions_rating
        if ghg_emissions_indicator is not None:
            self.ghg_emissions_indicator = ghg_emissions_indicator
        if smog_rating is not None:
            self.smog_rating = smog_rating
        if smog_indicator is not None:
            self.smog_indicator = smog_indicator

    @property
    def ghg_emissions_rating(self):
        """Gets the ghg_emissions_rating of this Economy.  # noqa: E501

        Show vehicle impact on climate change in terms of greeenhouse gases. This rating will be in the range of 1 - 10  # noqa: E501

        :return: The ghg_emissions_rating of this Economy.  # noqa: E501
        :rtype: float
        """
        return self._ghg_emissions_rating

    @ghg_emissions_rating.setter
    def ghg_emissions_rating(self, ghg_emissions_rating):
        """Sets the ghg_emissions_rating of this Economy.

        Show vehicle impact on climate change in terms of greeenhouse gases. This rating will be in the range of 1 - 10  # noqa: E501

        :param ghg_emissions_rating: The ghg_emissions_rating of this Economy.  # noqa: E501
        :type: float
        """

        self._ghg_emissions_rating = ghg_emissions_rating

    @property
    def ghg_emissions_indicator(self):
        """Gets the ghg_emissions_indicator of this Economy.  # noqa: E501

        Contains text like bad|Good|Very Good| Excellent  # noqa: E501

        :return: The ghg_emissions_indicator of this Economy.  # noqa: E501
        :rtype: str
        """
        return self._ghg_emissions_indicator

    @ghg_emissions_indicator.setter
    def ghg_emissions_indicator(self, ghg_emissions_indicator):
        """Sets the ghg_emissions_indicator of this Economy.

        Contains text like bad|Good|Very Good| Excellent  # noqa: E501

        :param ghg_emissions_indicator: The ghg_emissions_indicator of this Economy.  # noqa: E501
        :type: str
        """

        self._ghg_emissions_indicator = ghg_emissions_indicator

    @property
    def smog_rating(self):
        """Gets the smog_rating of this Economy.  # noqa: E501

        Shows vehicle's emissions of pollutants known to cause smog and other forms of air pollution. This rating will be in the range of 1 - 10  # noqa: E501

        :return: The smog_rating of this Economy.  # noqa: E501
        :rtype: float
        """
        return self._smog_rating

    @smog_rating.setter
    def smog_rating(self, smog_rating):
        """Sets the smog_rating of this Economy.

        Shows vehicle's emissions of pollutants known to cause smog and other forms of air pollution. This rating will be in the range of 1 - 10  # noqa: E501

        :param smog_rating: The smog_rating of this Economy.  # noqa: E501
        :type: float
        """

        self._smog_rating = smog_rating

    @property
    def smog_indicator(self):
        """Gets the smog_indicator of this Economy.  # noqa: E501

        Contains text like bad|Good|Very Good| Excellent  # noqa: E501

        :return: The smog_indicator of this Economy.  # noqa: E501
        :rtype: str
        """
        return self._smog_indicator

    @smog_indicator.setter
    def smog_indicator(self, smog_indicator):
        """Sets the smog_indicator of this Economy.

        Contains text like bad|Good|Very Good| Excellent  # noqa: E501

        :param smog_indicator: The smog_indicator of this Economy.  # noqa: E501
        :type: str
        """

        self._smog_indicator = smog_indicator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Economy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
