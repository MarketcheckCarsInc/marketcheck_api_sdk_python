# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ListingDebugAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'robot_id': 'float',
        'cycle_id': 'float',
        'scraped_at': 'str',
        'template_id': 'float',
        'user_id': 'float',
        'taxonomy_vin': 'str'
    }

    attribute_map = {
        'robot_id': 'robot_id',
        'cycle_id': 'cycle_id',
        'scraped_at': 'scraped_at',
        'template_id': 'template_id',
        'user_id': 'user_id',
        'taxonomy_vin': 'taxonomy_vin'
    }

    def __init__(self, robot_id=None, cycle_id=None, scraped_at=None, template_id=None, user_id=None, taxonomy_vin=None):  # noqa: E501
        """ListingDebugAttributes - a model defined in Swagger"""  # noqa: E501

        self._robot_id = None
        self._cycle_id = None
        self._scraped_at = None
        self._template_id = None
        self._user_id = None
        self._taxonomy_vin = None
        self.discriminator = None

        if robot_id is not None:
            self.robot_id = robot_id
        if cycle_id is not None:
            self.cycle_id = cycle_id
        if scraped_at is not None:
            self.scraped_at = scraped_at
        if template_id is not None:
            self.template_id = template_id
        if user_id is not None:
            self.user_id = user_id
        if taxonomy_vin is not None:
            self.taxonomy_vin = taxonomy_vin

    @property
    def robot_id(self):
        """Gets the robot_id of this ListingDebugAttributes.  # noqa: E501

        Robot id  # noqa: E501

        :return: The robot_id of this ListingDebugAttributes.  # noqa: E501
        :rtype: float
        """
        return self._robot_id

    @robot_id.setter
    def robot_id(self, robot_id):
        """Sets the robot_id of this ListingDebugAttributes.

        Robot id  # noqa: E501

        :param robot_id: The robot_id of this ListingDebugAttributes.  # noqa: E501
        :type: float
        """

        self._robot_id = robot_id

    @property
    def cycle_id(self):
        """Gets the cycle_id of this ListingDebugAttributes.  # noqa: E501

        Cycle id  # noqa: E501

        :return: The cycle_id of this ListingDebugAttributes.  # noqa: E501
        :rtype: float
        """
        return self._cycle_id

    @cycle_id.setter
    def cycle_id(self, cycle_id):
        """Sets the cycle_id of this ListingDebugAttributes.

        Cycle id  # noqa: E501

        :param cycle_id: The cycle_id of this ListingDebugAttributes.  # noqa: E501
        :type: float
        """

        self._cycle_id = cycle_id

    @property
    def scraped_at(self):
        """Gets the scraped_at of this ListingDebugAttributes.  # noqa: E501

        Scraped date and time  # noqa: E501

        :return: The scraped_at of this ListingDebugAttributes.  # noqa: E501
        :rtype: str
        """
        return self._scraped_at

    @scraped_at.setter
    def scraped_at(self, scraped_at):
        """Sets the scraped_at of this ListingDebugAttributes.

        Scraped date and time  # noqa: E501

        :param scraped_at: The scraped_at of this ListingDebugAttributes.  # noqa: E501
        :type: str
        """

        self._scraped_at = scraped_at

    @property
    def template_id(self):
        """Gets the template_id of this ListingDebugAttributes.  # noqa: E501

        Template id  # noqa: E501

        :return: The template_id of this ListingDebugAttributes.  # noqa: E501
        :rtype: float
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this ListingDebugAttributes.

        Template id  # noqa: E501

        :param template_id: The template_id of this ListingDebugAttributes.  # noqa: E501
        :type: float
        """

        self._template_id = template_id

    @property
    def user_id(self):
        """Gets the user_id of this ListingDebugAttributes.  # noqa: E501

        User id  # noqa: E501

        :return: The user_id of this ListingDebugAttributes.  # noqa: E501
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ListingDebugAttributes.

        User id  # noqa: E501

        :param user_id: The user_id of this ListingDebugAttributes.  # noqa: E501
        :type: float
        """

        self._user_id = user_id

    @property
    def taxonomy_vin(self):
        """Gets the taxonomy_vin of this ListingDebugAttributes.  # noqa: E501

        Taxonomy vin  # noqa: E501

        :return: The taxonomy_vin of this ListingDebugAttributes.  # noqa: E501
        :rtype: str
        """
        return self._taxonomy_vin

    @taxonomy_vin.setter
    def taxonomy_vin(self, taxonomy_vin):
        """Sets the taxonomy_vin of this ListingDebugAttributes.

        Taxonomy vin  # noqa: E501

        :param taxonomy_vin: The taxonomy_vin of this ListingDebugAttributes.  # noqa: E501
        :type: str
        """

        self._taxonomy_vin = taxonomy_vin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListingDebugAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
