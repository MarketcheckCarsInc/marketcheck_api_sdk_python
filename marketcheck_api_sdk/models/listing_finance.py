# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ListingFinance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'loan_term': 'int',
        'loan_apr': 'float',
        'down_payment': 'float',
        'down_payment_percentage': 'float',
        'estimated_monthly_payment': 'float'
    }

    attribute_map = {
        'loan_term': 'loan_term',
        'loan_apr': 'loan_apr',
        'down_payment': 'down_payment',
        'down_payment_percentage': 'down_payment_percentage',
        'estimated_monthly_payment': 'estimated_monthly_payment'
    }

    def __init__(self, loan_term=None, loan_apr=None, down_payment=None, down_payment_percentage=None, estimated_monthly_payment=None):  # noqa: E501
        """ListingFinance - a model defined in Swagger"""  # noqa: E501

        self._loan_term = None
        self._loan_apr = None
        self._down_payment = None
        self._down_payment_percentage = None
        self._estimated_monthly_payment = None
        self.discriminator = None

        if loan_term is not None:
            self.loan_term = loan_term
        if loan_apr is not None:
            self.loan_apr = loan_apr
        if down_payment is not None:
            self.down_payment = down_payment
        if down_payment_percentage is not None:
            self.down_payment_percentage = down_payment_percentage
        if estimated_monthly_payment is not None:
            self.estimated_monthly_payment = estimated_monthly_payment

    @property
    def loan_term(self):
        """Gets the loan_term of this ListingFinance.  # noqa: E501

        Loan term for this finance offer  # noqa: E501

        :return: The loan_term of this ListingFinance.  # noqa: E501
        :rtype: int
        """
        return self._loan_term

    @loan_term.setter
    def loan_term(self, loan_term):
        """Sets the loan_term of this ListingFinance.

        Loan term for this finance offer  # noqa: E501

        :param loan_term: The loan_term of this ListingFinance.  # noqa: E501
        :type: int
        """

        self._loan_term = loan_term

    @property
    def loan_apr(self):
        """Gets the loan_apr of this ListingFinance.  # noqa: E501

        Loan APR for this finance offer  # noqa: E501

        :return: The loan_apr of this ListingFinance.  # noqa: E501
        :rtype: float
        """
        return self._loan_apr

    @loan_apr.setter
    def loan_apr(self, loan_apr):
        """Sets the loan_apr of this ListingFinance.

        Loan APR for this finance offer  # noqa: E501

        :param loan_apr: The loan_apr of this ListingFinance.  # noqa: E501
        :type: float
        """

        self._loan_apr = loan_apr

    @property
    def down_payment(self):
        """Gets the down_payment of this ListingFinance.  # noqa: E501

        Down payment for this finance offer  # noqa: E501

        :return: The down_payment of this ListingFinance.  # noqa: E501
        :rtype: float
        """
        return self._down_payment

    @down_payment.setter
    def down_payment(self, down_payment):
        """Sets the down_payment of this ListingFinance.

        Down payment for this finance offer  # noqa: E501

        :param down_payment: The down_payment of this ListingFinance.  # noqa: E501
        :type: float
        """

        self._down_payment = down_payment

    @property
    def down_payment_percentage(self):
        """Gets the down_payment_percentage of this ListingFinance.  # noqa: E501

        down payment percentage for this finance offer  # noqa: E501

        :return: The down_payment_percentage of this ListingFinance.  # noqa: E501
        :rtype: float
        """
        return self._down_payment_percentage

    @down_payment_percentage.setter
    def down_payment_percentage(self, down_payment_percentage):
        """Sets the down_payment_percentage of this ListingFinance.

        down payment percentage for this finance offer  # noqa: E501

        :param down_payment_percentage: The down_payment_percentage of this ListingFinance.  # noqa: E501
        :type: float
        """

        self._down_payment_percentage = down_payment_percentage

    @property
    def estimated_monthly_payment(self):
        """Gets the estimated_monthly_payment of this ListingFinance.  # noqa: E501

        estimated monthly payment for this finance offer  # noqa: E501

        :return: The estimated_monthly_payment of this ListingFinance.  # noqa: E501
        :rtype: float
        """
        return self._estimated_monthly_payment

    @estimated_monthly_payment.setter
    def estimated_monthly_payment(self, estimated_monthly_payment):
        """Sets the estimated_monthly_payment of this ListingFinance.

        estimated monthly payment for this finance offer  # noqa: E501

        :param estimated_monthly_payment: The estimated_monthly_payment of this ListingFinance.  # noqa: E501
        :type: float
        """

        self._estimated_monthly_payment = estimated_monthly_payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListingFinance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
