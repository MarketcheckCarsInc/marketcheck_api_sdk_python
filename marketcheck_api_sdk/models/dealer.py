# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Dealer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'seller_name': 'str',
        'inventory_url': 'str',
        'data_source': 'str',
        'status': 'str',
        'street': 'str',
        'city': 'str',
        'state': 'str',
        'country': 'str',
        'zip': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'location_ll': 'str',
        'seller_phone': 'str',
        'seller_email': 'str',
        'distance': 'float'
    }

    attribute_map = {
        'id': 'id',
        'seller_name': 'seller_name',
        'inventory_url': 'inventory_url',
        'data_source': 'data_source',
        'status': 'status',
        'street': 'street',
        'city': 'city',
        'state': 'state',
        'country': 'country',
        'zip': 'zip',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'location_ll': 'location_ll',
        'seller_phone': 'seller_phone',
        'seller_email': 'seller_email',
        'distance': 'distance'
    }

    def __init__(self, id=None, seller_name=None, inventory_url=None, data_source=None, status=None, street=None, city=None, state=None, country=None, zip=None, latitude=None, longitude=None, location_ll=None, seller_phone=None, seller_email=None, distance=None):  # noqa: E501
        """Dealer - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._seller_name = None
        self._inventory_url = None
        self._data_source = None
        self._status = None
        self._street = None
        self._city = None
        self._state = None
        self._country = None
        self._zip = None
        self._latitude = None
        self._longitude = None
        self._location_ll = None
        self._seller_phone = None
        self._seller_email = None
        self._distance = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if seller_name is not None:
            self.seller_name = seller_name
        if inventory_url is not None:
            self.inventory_url = inventory_url
        if data_source is not None:
            self.data_source = data_source
        if status is not None:
            self.status = status
        if street is not None:
            self.street = street
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        if zip is not None:
            self.zip = zip
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if location_ll is not None:
            self.location_ll = location_ll
        if seller_phone is not None:
            self.seller_phone = seller_phone
        if seller_email is not None:
            self.seller_email = seller_email
        if distance is not None:
            self.distance = distance

    @property
    def id(self):
        """Gets the id of this Dealer.  # noqa: E501

        The unique id associated with the dealer in the Marketcheck database  # noqa: E501

        :return: The id of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dealer.

        The unique id associated with the dealer in the Marketcheck database  # noqa: E501

        :param id: The id of this Dealer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def seller_name(self):
        """Gets the seller_name of this Dealer.  # noqa: E501

        Name of the dealer  # noqa: E501

        :return: The seller_name of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._seller_name

    @seller_name.setter
    def seller_name(self, seller_name):
        """Sets the seller_name of this Dealer.

        Name of the dealer  # noqa: E501

        :param seller_name: The seller_name of this Dealer.  # noqa: E501
        :type: str
        """

        self._seller_name = seller_name

    @property
    def inventory_url(self):
        """Gets the inventory_url of this Dealer.  # noqa: E501

        Website of the dealer  # noqa: E501

        :return: The inventory_url of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._inventory_url

    @inventory_url.setter
    def inventory_url(self, inventory_url):
        """Sets the inventory_url of this Dealer.

        Website of the dealer  # noqa: E501

        :param inventory_url: The inventory_url of this Dealer.  # noqa: E501
        :type: str
        """

        self._inventory_url = inventory_url

    @property
    def data_source(self):
        """Gets the data_source of this Dealer.  # noqa: E501

        Datasource of the dealer  # noqa: E501

        :return: The data_source of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this Dealer.

        Datasource of the dealer  # noqa: E501

        :param data_source: The data_source of this Dealer.  # noqa: E501
        :type: str
        """

        self._data_source = data_source

    @property
    def status(self):
        """Gets the status of this Dealer.  # noqa: E501

        Status of the dealer  # noqa: E501

        :return: The status of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dealer.

        Status of the dealer  # noqa: E501

        :param status: The status of this Dealer.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def street(self):
        """Gets the street of this Dealer.  # noqa: E501

        Street of the dealer  # noqa: E501

        :return: The street of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Dealer.

        Street of the dealer  # noqa: E501

        :param street: The street of this Dealer.  # noqa: E501
        :type: str
        """

        self._street = street

    @property
    def city(self):
        """Gets the city of this Dealer.  # noqa: E501

        City of the dealer  # noqa: E501

        :return: The city of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Dealer.

        City of the dealer  # noqa: E501

        :param city: The city of this Dealer.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this Dealer.  # noqa: E501

        State of the dealer  # noqa: E501

        :return: The state of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Dealer.

        State of the dealer  # noqa: E501

        :param state: The state of this Dealer.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this Dealer.  # noqa: E501

        country of the dealer  # noqa: E501

        :return: The country of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Dealer.

        country of the dealer  # noqa: E501

        :param country: The country of this Dealer.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def zip(self):
        """Gets the zip of this Dealer.  # noqa: E501

        Zip of the dealer  # noqa: E501

        :return: The zip of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Dealer.

        Zip of the dealer  # noqa: E501

        :param zip: The zip of this Dealer.  # noqa: E501
        :type: str
        """

        self._zip = zip

    @property
    def latitude(self):
        """Gets the latitude of this Dealer.  # noqa: E501

        Latutide for the dealer location  # noqa: E501

        :return: The latitude of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Dealer.

        Latutide for the dealer location  # noqa: E501

        :param latitude: The latitude of this Dealer.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Dealer.  # noqa: E501

        Longitude for the dealer location  # noqa: E501

        :return: The longitude of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Dealer.

        Longitude for the dealer location  # noqa: E501

        :param longitude: The longitude of this Dealer.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def location_ll(self):
        """Gets the location_ll of this Dealer.  # noqa: E501

        location_ll for the dealer location  # noqa: E501

        :return: The location_ll of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._location_ll

    @location_ll.setter
    def location_ll(self, location_ll):
        """Sets the location_ll of this Dealer.

        location_ll for the dealer location  # noqa: E501

        :param location_ll: The location_ll of this Dealer.  # noqa: E501
        :type: str
        """

        self._location_ll = location_ll

    @property
    def seller_phone(self):
        """Gets the seller_phone of this Dealer.  # noqa: E501

        Contact no of the dealer  # noqa: E501

        :return: The seller_phone of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._seller_phone

    @seller_phone.setter
    def seller_phone(self, seller_phone):
        """Sets the seller_phone of this Dealer.

        Contact no of the dealer  # noqa: E501

        :param seller_phone: The seller_phone of this Dealer.  # noqa: E501
        :type: str
        """

        self._seller_phone = seller_phone

    @property
    def seller_email(self):
        """Gets the seller_email of this Dealer.  # noqa: E501

        Contact email of the dealer  # noqa: E501

        :return: The seller_email of this Dealer.  # noqa: E501
        :rtype: str
        """
        return self._seller_email

    @seller_email.setter
    def seller_email(self, seller_email):
        """Sets the seller_email of this Dealer.

        Contact email of the dealer  # noqa: E501

        :param seller_email: The seller_email of this Dealer.  # noqa: E501
        :type: str
        """

        self._seller_email = seller_email

    @property
    def distance(self):
        """Gets the distance of this Dealer.  # noqa: E501

        Distance of dealer from given location  # noqa: E501

        :return: The distance of this Dealer.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Dealer.

        Distance of dealer from given location  # noqa: E501

        :param distance: The distance of this Dealer.  # noqa: E501
        :type: float
        """

        self._distance = distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dealer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
