# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Mds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mds': 'int',
        'total_active_cars_for_ymmt': 'int',
        'total_cars_sold_in_last_45_days': 'int',
        'sold_vins': 'list[str]',
        'year': 'int',
        'make': 'str',
        'model': 'str',
        'trim': 'str'
    }

    attribute_map = {
        'mds': 'mds',
        'total_active_cars_for_ymmt': 'total_active_cars_for_ymmt',
        'total_cars_sold_in_last_45_days': 'total_cars_sold_in_last_45_days',
        'sold_vins': 'sold_vins',
        'year': 'year',
        'make': 'make',
        'model': 'model',
        'trim': 'trim'
    }

    def __init__(self, mds=None, total_active_cars_for_ymmt=None, total_cars_sold_in_last_45_days=None, sold_vins=None, year=None, make=None, model=None, trim=None):  # noqa: E501
        """Mds - a model defined in Swagger"""  # noqa: E501

        self._mds = None
        self._total_active_cars_for_ymmt = None
        self._total_cars_sold_in_last_45_days = None
        self._sold_vins = None
        self._year = None
        self._make = None
        self._model = None
        self._trim = None
        self.discriminator = None

        if mds is not None:
            self.mds = mds
        if total_active_cars_for_ymmt is not None:
            self.total_active_cars_for_ymmt = total_active_cars_for_ymmt
        if total_cars_sold_in_last_45_days is not None:
            self.total_cars_sold_in_last_45_days = total_cars_sold_in_last_45_days
        if sold_vins is not None:
            self.sold_vins = sold_vins
        if year is not None:
            self.year = year
        if make is not None:
            self.make = make
        if model is not None:
            self.model = model
        if trim is not None:
            self.trim = trim

    @property
    def mds(self):
        """Gets the mds of this Mds.  # noqa: E501

        Provides Market days supply count  # noqa: E501

        :return: The mds of this Mds.  # noqa: E501
        :rtype: int
        """
        return self._mds

    @mds.setter
    def mds(self, mds):
        """Sets the mds of this Mds.

        Provides Market days supply count  # noqa: E501

        :param mds: The mds of this Mds.  # noqa: E501
        :type: int
        """

        self._mds = mds

    @property
    def total_active_cars_for_ymmt(self):
        """Gets the total_active_cars_for_ymmt of this Mds.  # noqa: E501

        Active cars for ymmt combination  # noqa: E501

        :return: The total_active_cars_for_ymmt of this Mds.  # noqa: E501
        :rtype: int
        """
        return self._total_active_cars_for_ymmt

    @total_active_cars_for_ymmt.setter
    def total_active_cars_for_ymmt(self, total_active_cars_for_ymmt):
        """Sets the total_active_cars_for_ymmt of this Mds.

        Active cars for ymmt combination  # noqa: E501

        :param total_active_cars_for_ymmt: The total_active_cars_for_ymmt of this Mds.  # noqa: E501
        :type: int
        """

        self._total_active_cars_for_ymmt = total_active_cars_for_ymmt

    @property
    def total_cars_sold_in_last_45_days(self):
        """Gets the total_cars_sold_in_last_45_days of this Mds.  # noqa: E501

        Cars sold in last 45 days  # noqa: E501

        :return: The total_cars_sold_in_last_45_days of this Mds.  # noqa: E501
        :rtype: int
        """
        return self._total_cars_sold_in_last_45_days

    @total_cars_sold_in_last_45_days.setter
    def total_cars_sold_in_last_45_days(self, total_cars_sold_in_last_45_days):
        """Sets the total_cars_sold_in_last_45_days of this Mds.

        Cars sold in last 45 days  # noqa: E501

        :param total_cars_sold_in_last_45_days: The total_cars_sold_in_last_45_days of this Mds.  # noqa: E501
        :type: int
        """

        self._total_cars_sold_in_last_45_days = total_cars_sold_in_last_45_days

    @property
    def sold_vins(self):
        """Gets the sold_vins of this Mds.  # noqa: E501

        Sold vins array  # noqa: E501

        :return: The sold_vins of this Mds.  # noqa: E501
        :rtype: list[str]
        """
        return self._sold_vins

    @sold_vins.setter
    def sold_vins(self, sold_vins):
        """Sets the sold_vins of this Mds.

        Sold vins array  # noqa: E501

        :param sold_vins: The sold_vins of this Mds.  # noqa: E501
        :type: list[str]
        """

        self._sold_vins = sold_vins

    @property
    def year(self):
        """Gets the year of this Mds.  # noqa: E501

        Year of vin provided  # noqa: E501

        :return: The year of this Mds.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Mds.

        Year of vin provided  # noqa: E501

        :param year: The year of this Mds.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def make(self):
        """Gets the make of this Mds.  # noqa: E501

        Make of vin provided  # noqa: E501

        :return: The make of this Mds.  # noqa: E501
        :rtype: str
        """
        return self._make

    @make.setter
    def make(self, make):
        """Sets the make of this Mds.

        Make of vin provided  # noqa: E501

        :param make: The make of this Mds.  # noqa: E501
        :type: str
        """

        self._make = make

    @property
    def model(self):
        """Gets the model of this Mds.  # noqa: E501

        Model of vin provided  # noqa: E501

        :return: The model of this Mds.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Mds.

        Model of vin provided  # noqa: E501

        :param model: The model of this Mds.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def trim(self):
        """Gets the trim of this Mds.  # noqa: E501

        Trim of vin provided  # noqa: E501

        :return: The trim of this Mds.  # noqa: E501
        :rtype: str
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this Mds.

        Trim of vin provided  # noqa: E501

        :param trim: The trim of this Mds.  # noqa: E501
        :type: str
        """

        self._trim = trim

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
