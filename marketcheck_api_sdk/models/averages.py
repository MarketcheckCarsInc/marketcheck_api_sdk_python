# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Averages(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'float',
        'msrp': 'float',
        'miles': 'float',
        'dom': 'float',
        'age': 'float',
        'units': 'float'
    }

    attribute_map = {
        'price': 'price',
        'msrp': 'msrp',
        'miles': 'miles',
        'dom': 'dom',
        'age': 'age',
        'units': 'units'
    }

    def __init__(self, price=None, msrp=None, miles=None, dom=None, age=None, units=None):  # noqa: E501
        """Averages - a model defined in Swagger"""  # noqa: E501

        self._price = None
        self._msrp = None
        self._miles = None
        self._dom = None
        self._age = None
        self._units = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if msrp is not None:
            self.msrp = msrp
        if miles is not None:
            self.miles = miles
        if dom is not None:
            self.dom = dom
        if age is not None:
            self.age = age
        if units is not None:
            self.units = units

    @property
    def price(self):
        """Gets the price of this Averages.  # noqa: E501

        Mean price value for the car  # noqa: E501

        :return: The price of this Averages.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Averages.

        Mean price value for the car  # noqa: E501

        :param price: The price of this Averages.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def msrp(self):
        """Gets the msrp of this Averages.  # noqa: E501

        Mean msrp value for the car  # noqa: E501

        :return: The msrp of this Averages.  # noqa: E501
        :rtype: float
        """
        return self._msrp

    @msrp.setter
    def msrp(self, msrp):
        """Sets the msrp of this Averages.

        Mean msrp value for the car  # noqa: E501

        :param msrp: The msrp of this Averages.  # noqa: E501
        :type: float
        """

        self._msrp = msrp

    @property
    def miles(self):
        """Gets the miles of this Averages.  # noqa: E501

        Mean miles value for the car  # noqa: E501

        :return: The miles of this Averages.  # noqa: E501
        :rtype: float
        """
        return self._miles

    @miles.setter
    def miles(self, miles):
        """Sets the miles of this Averages.

        Mean miles value for the car  # noqa: E501

        :param miles: The miles of this Averages.  # noqa: E501
        :type: float
        """

        self._miles = miles

    @property
    def dom(self):
        """Gets the dom of this Averages.  # noqa: E501

        Average Days on Market value for the car based on all listings found in the Marketcheck database for this car  # noqa: E501

        :return: The dom of this Averages.  # noqa: E501
        :rtype: float
        """
        return self._dom

    @dom.setter
    def dom(self, dom):
        """Sets the dom of this Averages.

        Average Days on Market value for the car based on all listings found in the Marketcheck database for this car  # noqa: E501

        :param dom: The dom of this Averages.  # noqa: E501
        :type: float
        """

        self._dom = dom

    @property
    def age(self):
        """Gets the age of this Averages.  # noqa: E501

        Average age of the car  # noqa: E501

        :return: The age of this Averages.  # noqa: E501
        :rtype: float
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Averages.

        Average age of the car  # noqa: E501

        :param age: The age of this Averages.  # noqa: E501
        :type: float
        """

        self._age = age

    @property
    def units(self):
        """Gets the units of this Averages.  # noqa: E501

        No of units for this car on the market  # noqa: E501

        :return: The units of this Averages.  # noqa: E501
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Averages.

        No of units for this car on the market  # noqa: E501

        :param units: The units of this Averages.  # noqa: E501
        :type: float
        """

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Averages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
