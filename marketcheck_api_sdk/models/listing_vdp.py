# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ListingVDP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'html': 'str',
        'crawled_at': 'float',
        'vdp_url': 'str'
    }

    attribute_map = {
        'html': 'html',
        'crawled_at': 'crawled_at',
        'vdp_url': 'vdp_url'
    }

    def __init__(self, html=None, crawled_at=None, vdp_url=None):  # noqa: E501
        """ListingVDP - a model defined in Swagger"""  # noqa: E501

        self._html = None
        self._crawled_at = None
        self._vdp_url = None
        self.discriminator = None

        if html is not None:
            self.html = html
        if crawled_at is not None:
            self.crawled_at = crawled_at
        if vdp_url is not None:
            self.vdp_url = vdp_url

    @property
    def html(self):
        """Gets the html of this ListingVDP.  # noqa: E501

        The HTML string for the listing web page  # noqa: E501

        :return: The html of this ListingVDP.  # noqa: E501
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ListingVDP.

        The HTML string for the listing web page  # noqa: E501

        :param html: The html of this ListingVDP.  # noqa: E501
        :type: str
        """

        self._html = html

    @property
    def crawled_at(self):
        """Gets the crawled_at of this ListingVDP.  # noqa: E501

        The timestamp indicating the time when the VDP was cached  # noqa: E501

        :return: The crawled_at of this ListingVDP.  # noqa: E501
        :rtype: float
        """
        return self._crawled_at

    @crawled_at.setter
    def crawled_at(self, crawled_at):
        """Sets the crawled_at of this ListingVDP.

        The timestamp indicating the time when the VDP was cached  # noqa: E501

        :param crawled_at: The crawled_at of this ListingVDP.  # noqa: E501
        :type: float
        """

        self._crawled_at = crawled_at

    @property
    def vdp_url(self):
        """Gets the vdp_url of this ListingVDP.  # noqa: E501

        The URL of the VDP  # noqa: E501

        :return: The vdp_url of this ListingVDP.  # noqa: E501
        :rtype: str
        """
        return self._vdp_url

    @vdp_url.setter
    def vdp_url(self, vdp_url):
        """Sets the vdp_url of this ListingVDP.

        The URL of the VDP  # noqa: E501

        :param vdp_url: The vdp_url of this ListingVDP.  # noqa: E501
        :type: str
        """

        self._vdp_url = vdp_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListingVDP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
