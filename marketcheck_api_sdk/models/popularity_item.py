# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PopularityItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'left': 'float',
        'right': 'float',
        'difference': 'float',
        'thumbs': 'str',
        'delta_percent': 'float',
        'color': 'str'
    }

    attribute_map = {
        'text': 'text',
        'left': 'left',
        'right': 'right',
        'difference': 'difference',
        'thumbs': 'thumbs',
        'delta_percent': 'delta_percent',
        'color': 'color'
    }

    def __init__(self, text=None, left=None, right=None, difference=None, thumbs=None, delta_percent=None, color=None):  # noqa: E501
        """PopularityItem - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._left = None
        self._right = None
        self._difference = None
        self._thumbs = None
        self._delta_percent = None
        self._color = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if left is not None:
            self.left = left
        if right is not None:
            self.right = right
        if difference is not None:
            self.difference = difference
        if thumbs is not None:
            self.thumbs = thumbs
        if delta_percent is not None:
            self.delta_percent = delta_percent
        if color is not None:
            self.color = color

    @property
    def text(self):
        """Gets the text of this PopularityItem.  # noqa: E501

        Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars  # noqa: E501

        :return: The text of this PopularityItem.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this PopularityItem.

        Description for which popularity should be show eg: 2016 ford F-150 Lariat vs All Other Cars  # noqa: E501

        :param text: The text of this PopularityItem.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def left(self):
        """Gets the left of this PopularityItem.  # noqa: E501

        Left side rating for above description (2016 ford F-150 Lariat)  # noqa: E501

        :return: The left of this PopularityItem.  # noqa: E501
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this PopularityItem.

        Left side rating for above description (2016 ford F-150 Lariat)  # noqa: E501

        :param left: The left of this PopularityItem.  # noqa: E501
        :type: float
        """

        self._left = left

    @property
    def right(self):
        """Gets the right of this PopularityItem.  # noqa: E501

        Right side rating for above description (All Other Cars)  # noqa: E501

        :return: The right of this PopularityItem.  # noqa: E501
        :rtype: float
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this PopularityItem.

        Right side rating for above description (All Other Cars)  # noqa: E501

        :param right: The right of this PopularityItem.  # noqa: E501
        :type: float
        """

        self._right = right

    @property
    def difference(self):
        """Gets the difference of this PopularityItem.  # noqa: E501

        Difference depending upon left and right analysis  # noqa: E501

        :return: The difference of this PopularityItem.  # noqa: E501
        :rtype: float
        """
        return self._difference

    @difference.setter
    def difference(self, difference):
        """Sets the difference of this PopularityItem.

        Difference depending upon left and right analysis  # noqa: E501

        :param difference: The difference of this PopularityItem.  # noqa: E501
        :type: float
        """

        self._difference = difference

    @property
    def thumbs(self):
        """Gets the thumbs of this PopularityItem.  # noqa: E501

        Thumbs up/down depending upon left and right analysis numbers  # noqa: E501

        :return: The thumbs of this PopularityItem.  # noqa: E501
        :rtype: str
        """
        return self._thumbs

    @thumbs.setter
    def thumbs(self, thumbs):
        """Sets the thumbs of this PopularityItem.

        Thumbs up/down depending upon left and right analysis numbers  # noqa: E501

        :param thumbs: The thumbs of this PopularityItem.  # noqa: E501
        :type: str
        """

        self._thumbs = thumbs

    @property
    def delta_percent(self):
        """Gets the delta_percent of this PopularityItem.  # noqa: E501

        Delta percent  # noqa: E501

        :return: The delta_percent of this PopularityItem.  # noqa: E501
        :rtype: float
        """
        return self._delta_percent

    @delta_percent.setter
    def delta_percent(self, delta_percent):
        """Sets the delta_percent of this PopularityItem.

        Delta percent  # noqa: E501

        :param delta_percent: The delta_percent of this PopularityItem.  # noqa: E501
        :type: float
        """

        self._delta_percent = delta_percent

    @property
    def color(self):
        """Gets the color of this PopularityItem.  # noqa: E501

        Color depending upon left and right analysis numbers  # noqa: E501

        :return: The color of this PopularityItem.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PopularityItem.

        Color depending upon left and right analysis numbers  # noqa: E501

        :param color: The color of this PopularityItem.  # noqa: E501
        :type: str
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PopularityItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
