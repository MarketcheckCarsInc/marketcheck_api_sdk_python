# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StatsItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min': 'int',
        'max': 'int',
        'count': 'int',
        'missing': 'int',
        'sum': 'int',
        'mean': 'float',
        'stddev': 'float',
        'sum_of_squares': 'float',
        'median': 'float'
    }

    attribute_map = {
        'min': 'min',
        'max': 'max',
        'count': 'count',
        'missing': 'missing',
        'sum': 'sum',
        'mean': 'mean',
        'stddev': 'stddev',
        'sum_of_squares': 'sum_of_squares',
        'median': 'median'
    }

    def __init__(self, min=None, max=None, count=None, missing=None, sum=None, mean=None, stddev=None, sum_of_squares=None, median=None):  # noqa: E501
        """StatsItem - a model defined in Swagger"""  # noqa: E501

        self._min = None
        self._max = None
        self._count = None
        self._missing = None
        self._sum = None
        self._mean = None
        self._stddev = None
        self._sum_of_squares = None
        self._median = None
        self.discriminator = None

        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if count is not None:
            self.count = count
        if missing is not None:
            self.missing = missing
        if sum is not None:
            self.sum = sum
        if mean is not None:
            self.mean = mean
        if stddev is not None:
            self.stddev = stddev
        if sum_of_squares is not None:
            self.sum_of_squares = sum_of_squares
        if median is not None:
            self.median = median

    @property
    def min(self):
        """Gets the min of this StatsItem.  # noqa: E501

        Minimum value of the field  # noqa: E501

        :return: The min of this StatsItem.  # noqa: E501
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this StatsItem.

        Minimum value of the field  # noqa: E501

        :param min: The min of this StatsItem.  # noqa: E501
        :type: int
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this StatsItem.  # noqa: E501

        Maximum value of the field  # noqa: E501

        :return: The max of this StatsItem.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this StatsItem.

        Maximum value of the field  # noqa: E501

        :param max: The max of this StatsItem.  # noqa: E501
        :type: int
        """

        self._max = max

    @property
    def count(self):
        """Gets the count of this StatsItem.  # noqa: E501

        count  # noqa: E501

        :return: The count of this StatsItem.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this StatsItem.

        count  # noqa: E501

        :param count: The count of this StatsItem.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def missing(self):
        """Gets the missing of this StatsItem.  # noqa: E501

        count of listings missing particular field  # noqa: E501

        :return: The missing of this StatsItem.  # noqa: E501
        :rtype: int
        """
        return self._missing

    @missing.setter
    def missing(self, missing):
        """Sets the missing of this StatsItem.

        count of listings missing particular field  # noqa: E501

        :param missing: The missing of this StatsItem.  # noqa: E501
        :type: int
        """

        self._missing = missing

    @property
    def sum(self):
        """Gets the sum of this StatsItem.  # noqa: E501

        Summation of all values of the field  # noqa: E501

        :return: The sum of this StatsItem.  # noqa: E501
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this StatsItem.

        Summation of all values of the field  # noqa: E501

        :param sum: The sum of this StatsItem.  # noqa: E501
        :type: int
        """

        self._sum = sum

    @property
    def mean(self):
        """Gets the mean of this StatsItem.  # noqa: E501

        Mean of the field  # noqa: E501

        :return: The mean of this StatsItem.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this StatsItem.

        Mean of the field  # noqa: E501

        :param mean: The mean of this StatsItem.  # noqa: E501
        :type: float
        """

        self._mean = mean

    @property
    def stddev(self):
        """Gets the stddev of this StatsItem.  # noqa: E501

        stddev of the field  # noqa: E501

        :return: The stddev of this StatsItem.  # noqa: E501
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this StatsItem.

        stddev of the field  # noqa: E501

        :param stddev: The stddev of this StatsItem.  # noqa: E501
        :type: float
        """

        self._stddev = stddev

    @property
    def sum_of_squares(self):
        """Gets the sum_of_squares of this StatsItem.  # noqa: E501

        sum_of_squares of the field  # noqa: E501

        :return: The sum_of_squares of this StatsItem.  # noqa: E501
        :rtype: float
        """
        return self._sum_of_squares

    @sum_of_squares.setter
    def sum_of_squares(self, sum_of_squares):
        """Sets the sum_of_squares of this StatsItem.

        sum_of_squares of the field  # noqa: E501

        :param sum_of_squares: The sum_of_squares of this StatsItem.  # noqa: E501
        :type: float
        """

        self._sum_of_squares = sum_of_squares

    @property
    def median(self):
        """Gets the median of this StatsItem.  # noqa: E501

        median of the field  # noqa: E501

        :return: The median of this StatsItem.  # noqa: E501
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this StatsItem.

        median of the field  # noqa: E501

        :param median: The median of this StatsItem.  # noqa: E501
        :type: float
        """

        self._median = median

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
