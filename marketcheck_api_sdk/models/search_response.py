# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from marketcheck_api_sdk.models.base_listing import BaseListing  # noqa: F401,E501


class SearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'num_found': 'int',
        'listings': 'list[BaseListing]',
        'facets': 'object',
        'stats': 'object'
    }

    attribute_map = {
        'num_found': 'num_found',
        'listings': 'listings',
        'facets': 'facets',
        'stats': 'stats'
    }

    def __init__(self, num_found=None, listings=None, facets=None, stats=None):  # noqa: E501
        """SearchResponse - a model defined in Swagger"""  # noqa: E501

        self._num_found = None
        self._listings = None
        self._facets = None
        self._stats = None
        self.discriminator = None

        if num_found is not None:
            self.num_found = num_found
        if listings is not None:
            self.listings = listings
        if facets is not None:
            self.facets = facets
        if stats is not None:
            self.stats = stats

    @property
    def num_found(self):
        """Gets the num_found of this SearchResponse.  # noqa: E501

        The number of listings found  # noqa: E501

        :return: The num_found of this SearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_found

    @num_found.setter
    def num_found(self, num_found):
        """Sets the num_found of this SearchResponse.

        The number of listings found  # noqa: E501

        :param num_found: The num_found of this SearchResponse.  # noqa: E501
        :type: int
        """

        self._num_found = num_found

    @property
    def listings(self):
        """Gets the listings of this SearchResponse.  # noqa: E501


        :return: The listings of this SearchResponse.  # noqa: E501
        :rtype: list[BaseListing]
        """
        return self._listings

    @listings.setter
    def listings(self, listings):
        """Sets the listings of this SearchResponse.


        :param listings: The listings of this SearchResponse.  # noqa: E501
        :type: list[BaseListing]
        """

        self._listings = listings

    @property
    def facets(self):
        """Gets the facets of this SearchResponse.  # noqa: E501


        :return: The facets of this SearchResponse.  # noqa: E501
        :rtype: object
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this SearchResponse.


        :param facets: The facets of this SearchResponse.  # noqa: E501
        :type: object
        """

        self._facets = facets

    @property
    def stats(self):
        """Gets the stats of this SearchResponse.  # noqa: E501


        :return: The stats of this SearchResponse.  # noqa: E501
        :rtype: object
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this SearchResponse.


        :param stats: The stats of this SearchResponse.  # noqa: E501
        :type: object
        """

        self._stats = stats

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
