# coding: utf-8

"""
    Marketcheck Cars API

    <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>  # noqa: E501

    OpenAPI spec version: 1.0.3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from marketcheck_api_sdk.api_client import ApiClient


class ListingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_listing(self, id, **kwargs):  # noqa: E501
        """Listing by id  # noqa: E501

        Get a particular listing by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get all the listing attributes (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: Listing
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_listing_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_listing_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_listing_with_http_info(self, id, **kwargs):  # noqa: E501
        """Listing by id  # noqa: E501

        Get a particular listing by its id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get all the listing attributes (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: Listing
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_listing" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_listing`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listing/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Listing',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_listing_extra(self, id, **kwargs):  # noqa: E501
        """Long text Listings attributes for Listing with the given id  # noqa: E501

        Get listing options, features, seller comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_extra(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get all the long text listing attributes (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: ListingExtraAttributes
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_listing_extra_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_listing_extra_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_listing_extra_with_http_info(self, id, **kwargs):  # noqa: E501
        """Long text Listings attributes for Listing with the given id  # noqa: E501

        Get listing options, features, seller comments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_extra_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get all the long text listing attributes (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: ListingExtraAttributes
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_listing_extra" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_listing_extra`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listing/{id}/extra', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListingExtraAttributes',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_listing_media(self, id, **kwargs):  # noqa: E501
        """Listing media by id  # noqa: E501

        Get listing media (photo, photos) by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_media(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get all the listing attributes (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: ListingMedia
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_listing_media_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_listing_media_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_listing_media_with_http_info(self, id, **kwargs):  # noqa: E501
        """Listing media by id  # noqa: E501

        Get listing media (photo, photos) by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_media_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get all the listing attributes (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: ListingMedia
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_listing_media" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_listing_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listing/{id}/media', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListingMedia',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_listing_vdp(self, id, **kwargs):  # noqa: E501
        """Get listing HTML  # noqa: E501

        Cached HTML of the Vehicle Details Page (VDP) for the listing. The HTML is cached only for 7 days for all listings. So this API could be used to get HTML of mostly active listings and that have recently expired  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_vdp(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get the vehicle details page (VDP) HTML (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :param str html: Get only HTML for given listings VDP page
        :return: ListingVDP
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_listing_vdp_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_listing_vdp_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_listing_vdp_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get listing HTML  # noqa: E501

        Cached HTML of the Vehicle Details Page (VDP) for the listing. The HTML is cached only for 7 days for all listings. So this API could be used to get HTML of mostly active listings and that have recently expired  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_listing_vdp_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Listing id to get the vehicle details page (VDP) HTML (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :param str html: Get only HTML for given listings VDP page
        :return: ListingVDP
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_key', 'html']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_listing_vdp" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_listing_vdp`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'html' in params:
            query_params.append(('html', params['html']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/listing/{id}/vdp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListingVDP',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_summary_report(self, vin, **kwargs):  # noqa: E501
        """Get Summary Report  # noqa: E501

        [MOCK] Generate Summary report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_summary_report(vin, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vin: VIN as a reference to the type of car for which Summary data is to be returned (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: list[VinReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_summary_report_with_http_info(vin, **kwargs)  # noqa: E501
        else:
            (data) = self.get_summary_report_with_http_info(vin, **kwargs)  # noqa: E501
            return data

    def get_summary_report_with_http_info(self, vin, **kwargs):  # noqa: E501
        """Get Summary Report  # noqa: E501

        [MOCK] Generate Summary report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_summary_report_with_http_info(vin, async=True)
        >>> result = thread.get()

        :param async bool
        :param str vin: VIN as a reference to the type of car for which Summary data is to be returned (required)
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :return: list[VinReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vin', 'api_key']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_summary_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'vin' is set
        if ('vin' not in params or
                params['vin'] is None):
            raise ValueError("Missing the required parameter `vin` when calling `get_summary_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'vin' in params:
            query_params.append(('vin', params['vin']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/vin_report_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VinReport]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search(self, **kwargs):  # noqa: E501
        """Gets active car listings for the given search criteria  # noqa: E501

        This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 1000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom/msrp for your search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search(async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :param float latitude: Latitude component of location
        :param float longitude: Longitude component of location
        :param int radius: Radius around the search location
        :param str zip: car search bases on zipcode
        :param bool include_lease: Boolean param to search for listings that include leasing options in them
        :param bool include_finance: Boolean param to search for listings that include finance options in them
        :param str lease_term: Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60
        :param str lease_down_payment: Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60
        :param str lease_emp: Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60
        :param str finance_loan_term: Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60
        :param str finance_loan_apr: Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60
        :param str finance_emp: Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60
        :param str finance_down_payment: Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60
        :param str finance_down_payment_per: Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60
        :param str car_type: Car type. Allowed values are - new / used / certified
        :param str seller_type: Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated.
        :param str carfax_1_owner: Indicates whether car has had only one owner or not
        :param str carfax_clean_title: Indicates whether car has clean ownership records
        :param str year: Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated.
        :param str make: Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi
        :param str model: Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang.
        :param str trim: Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated
        :param str dealer_id: Dealer id to filter the cars.
        :param str vin: Car vin to search
        :param str source: Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated
        :param str body_type: Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated.
        :param str body_subtype: Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
        :param str vehicle_type: Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated
        :param str vins: Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
        :param str taxonomy_vins: Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
        :param str ymmt: Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.
        :param str match: Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
        :param str cylinders: Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated
        :param str transmission: Transmission to filter the cars on. [a = Automatic, m = Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated
        :param str speeds: Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated
        :param str doors: Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
        :param str drivetrain: Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated
        :param str exterior_color: Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
        :param str interior_color: Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
        :param str engine: Filter listings on engine
        :param str engine_type: Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated
        :param str engine_aspiration: Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
        :param str engine_block: Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
        :param str miles_range: Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :param str price_range: Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :param str dom_range: Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :param str sort_by: Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point
        :param str sort_order: Sort order - asc or desc. Default sort order is distance from a point.
        :param str rows: Number of results to return. Default is 10. Max is 50
        :param str start: Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
        :param str facets: The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :param str stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :param str country: Filter on Country, by default US. Search available on US (United States) and CA (Canada)
        :param str plot: If plot has value true results in around 25k coordinates with limited fields to plot respective graph
        :param bool nodedup: If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin
        :param str state: Filter listsings on State
        :param str city: Filter listings on city
        :param str dealer_name: Filter listings on dealer_name
        :param str trim_o: Filter listings on web scraped trim
        :param str trim_r: Filter trim on custom possible matches
        :param str dom_active_range: Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :param str dom_180_range: Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :param str options: Tokenizer search on options for multiple options use | as seperator
        :param str features: Tokenizer search on features for multiple options use | as seperator
        :param bool exclude_certified: Boolean param to exclude certified cars from search results
        :return: SearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_with_http_info(self, **kwargs):  # noqa: E501
        """Gets active car listings for the given search criteria  # noqa: E501

        This endpoint is the meat of the API and serves many purposes. This API produces a list of currently active cars from the market for the given search criteria. The API results are limited to allow pagination upto 1000 rows.   The search API facilitates the following use cases -  1. Search Cars around a given geo-point within a given radius  2. Search cars for a specific year / make / model or combination of these  3. Search cars matching multiple year, make, model combinatins in the same search request 4. Filter results by most car specification attributes 5. Search for similar cars by VIN or Taxonomy VIN  6. Filter cars within a given price / miles / days on market (dom) range 7. Specify a sort order for the results on price / miles / dom / listed date  8. Search cars for a given City / State combination  9. Get Facets to build the search drill downs  10. Get Market averages for price/miles/dom/msrp for your search  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str api_key: The API Authentication Key. Mandatory with all API calls.
        :param float latitude: Latitude component of location
        :param float longitude: Longitude component of location
        :param int radius: Radius around the search location
        :param str zip: car search bases on zipcode
        :param bool include_lease: Boolean param to search for listings that include leasing options in them
        :param bool include_finance: Boolean param to search for listings that include finance options in them
        :param str lease_term: Search listings with exact lease term, or inside a range with min and max seperated by a dash like lease_term=30-60
        :param str lease_down_payment: Search listings with exact down payment in lease offers, or inside a range with min and max seperated by a dash like lease_down_payment=30-60
        :param str lease_emp: Search listings with lease offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like lease_emp=30-60
        :param str finance_loan_term: Search listings with exact finance loan term, or inside a range with min and max seperated by a dash like finance_loan_term=30-60
        :param str finance_loan_apr: Search listings with finance offers exactly matching loans Annual Percentage Rate, or inside a range with min and max seperated by a dash like finance_loan_apr=30-60
        :param str finance_emp: Search listings with finance offers exactly matching Estimated Monthly Payment(EMI), or inside a range with min and max seperated by a dash like finance_emp=30-60
        :param str finance_down_payment: Search listings with exact down payment in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment=30-60
        :param str finance_down_payment_per: Search listings with exact down payment percentage in finance offers, or inside a range with min and max seperated by a dash like finance_down_payment_per=30-60
        :param str car_type: Car type. Allowed values are - new / used / certified
        :param str seller_type: Seller type to filter cars on. Valid filter values are those that our Search facets API returns for unique seller types. You can pass in multiple seller type values comma separated.
        :param str carfax_1_owner: Indicates whether car has had only one owner or not
        :param str carfax_clean_title: Indicates whether car has clean ownership records
        :param str year: Car year - 1980 onwards. Valid filter values are those that our Search facets API returns for unique years. You can pass in multiple year values comma separated.
        :param str make: Car Make - should be a standard OEM Make name. Valid filter values are those that our Search facets API returns for unique make. You can pass in multiple make values separated by comma. e.g. ford,audi
        :param str model: Car model to search. Valid filter values are those that our Search facets API returns for unique model. You can pass in multiple model values comma separated for e.g f-150,Mustang.
        :param str trim: Car trim to search. Valid filter values are those that our Search facets API returns for unique trim. You can pass in multiple trim values comma separated
        :param str dealer_id: Dealer id to filter the cars.
        :param str vin: Car vin to search
        :param str source: Source to search cars. Valid filter values are those that our Search facets API returns for unique source. You can pass in multiple source values comma separated
        :param str body_type: Body type to filter the cars on. Valid filter values are those that our Search facets API returns for unique body types. You can pass in multiple body types comma separated.
        :param str body_subtype: Body subtype to filter the cars on. Valid filter values are those that our Search facets API returns for unique body subtypes. You can pass in multiple body subtype values comma separated
        :param str vehicle_type: Vehicle type to filter the cars on. Valid filter values are those that our Search facets API returns for unique vehicle types. You can pass in multiple vehicle type values comma separated
        :param str vins: Comma separated list of 17 digit vins to search the matching cars for. Only 10 VINs allowed per request. If the request contains more than 10 VINs the first 10 VINs will be considered. Could be used as a More Like This or Similar Vehicles search for the given VINs. Ths vins parameter is an alternative to taxonomy_vins or ymmt parameters available with the search API. vins and taxonomy_vins parameters could be used to filter our cars with the exact build represented by the vins or taxonomy_vins whereas ymmt is a top level filter that does not filter cars by the build attributes like doors, drivetrain, cylinders, body type, body subtype, vehicle type etc
        :param str taxonomy_vins: Comma separated list of 10 letters excert from the 17 letter VIN. The 10 letters to be picked up from the 17 letter VIN are - first 8 letters and the 10th and 11th letter. E.g. For a VIN - 1FTFW1EF3EKE57182 the taxonomy vin would be - 1FTFW1EFEK  A taxonomy VIN identified a build of a car and could be used to filter our cars of a particular build. This is an alternative to the vin or ymmt parameters to the search API.
        :param str ymmt: Comma separated list of Year, Make, Model, Trim combinations. Each combination needs to have the year,make,model, trim values separated by a pipe '|' character in the form year|make|model|trim. e.g. 2010|Audi|A5,2014|Nissan|Sentra|S 6MT,|Honda|City|   You could just provide strings of the form - 'year|make||' or 'year|make|model' or '|make|model|' combinations. Individual year / make / model filters provied with the API calls will take precedence over the Year, Make, Model, Trim combinations. The Make, Model, Trim values must be valid values as per the Marketcheck Vin Decoder. If you are using a separate vin decoder then look at using the 'vins' or 'taxonomy_vins' parameter to the search api instead the year|make|model|trim combinations.
        :param str match: Comma separated list of Year, Make, Model, Trim fields. For example - year,make,model,trim fields for which user wants to do an exact match
        :param str cylinders: Cylinders to filter the cars on. Valid filter values are those that our Search facets API returns for unique cylinder values. You can pass in multiple cylinder values comma separated
        :param str transmission: Transmission to filter the cars on. [a = Automatic, m = Manual]. Valid filter values are those that our Search facets API returns for unique transmission. You can pass in multiple transmission values comma separated
        :param str speeds: Speeds to filter the cars on. Valid filter values are those that our Search facets API returns for unique speeds. You can pass in multiple speeds values comma separated
        :param str doors: Doors to filter the cars on. Valid filter values are those that our Search facets API returns for unique doors. You can pass in multiple doors values comma separated
        :param str drivetrain: Drivetrain to filter the cars on. Valid filter values are those that our Search facets API returns for unique drivetrains. You can pass in multiple drivetrain values comma separated
        :param str exterior_color: Exterior color to match. Valid filter values are those that our Search facets API returns for unique exterior colors. You can pass in multiple exterior color values comma separated
        :param str interior_color: Interior color to match. Valid filter values are those that our Search facets API returns for unique interior colors. You can pass in multiple interior color values comma separated
        :param str engine: Filter listings on engine
        :param str engine_type: Engine Type to match. Valid filter values are those that our Search facets API returns for unique engine types. You can pass in multiple engine type values comma separated
        :param str engine_aspiration: Engine Aspiration to match. Valid filter values are those that our Search facets API returns for unique Engine Aspirations. You can pass in multiple Engine aspirations values comma separated
        :param str engine_block: Engine Block to match. Valid filter values are those that our Search facets API returns for unique Engine Block. You can pass in multiple Engine Block values comma separated
        :param str miles_range: Miles range to filter cars with miles in the given range. Range to be given in the format - min-max e.g. 1000-5000
        :param str price_range: Price range to filter cars with the price in the range given. Range to be given in the format - min-max e.g. 1000-5000
        :param str dom_range: Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :param str sort_by: Sort by field - allowed fields are distance|price|miles|dom|age|posted_at|year. Default sort field is distance from the given point
        :param str sort_order: Sort order - asc or desc. Default sort order is distance from a point.
        :param str rows: Number of results to return. Default is 10. Max is 50
        :param str start: Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
        :param str facets: The comma separated list of fields for which facets are requested. Supported fields are - year, make, model, trim, vehicle_type, car_type, body_type, body_subtype, drivetrain, cylinders, transmission, exterior_color, interior_color, doors, engine_type, engine_aspiration, engine_block. Facets could be requested in addition to the listings for the search. Please note - The API calls with lots of facet fields may take longer to respond.
        :param str stats: The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
        :param str country: Filter on Country, by default US. Search available on US (United States) and CA (Canada)
        :param str plot: If plot has value true results in around 25k coordinates with limited fields to plot respective graph
        :param bool nodedup: If nodedup is set to true then will give results without is_searchable i.e multiple listings for single vin
        :param str state: Filter listsings on State
        :param str city: Filter listings on city
        :param str dealer_name: Filter listings on dealer_name
        :param str trim_o: Filter listings on web scraped trim
        :param str trim_r: Filter trim on custom possible matches
        :param str dom_active_range: Active Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :param str dom_180_range: Last 180 Days on Market range to filter cars with the DOM within the given range. Range to be given in the format - min-max e.g. 10-50
        :param str options: Tokenizer search on options for multiple options use | as seperator
        :param str features: Tokenizer search on features for multiple options use | as seperator
        :param bool exclude_certified: Boolean param to exclude certified cars from search results
        :return: SearchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_key', 'latitude', 'longitude', 'radius', 'zip', 'include_lease', 'include_finance', 'lease_term', 'lease_down_payment', 'lease_emp', 'finance_loan_term', 'finance_loan_apr', 'finance_emp', 'finance_down_payment', 'finance_down_payment_per', 'car_type', 'seller_type', 'carfax_1_owner', 'carfax_clean_title', 'year', 'make', 'model', 'trim', 'dealer_id', 'vin', 'source', 'body_type', 'body_subtype', 'vehicle_type', 'vins', 'taxonomy_vins', 'ymmt', 'match', 'cylinders', 'transmission', 'speeds', 'doors', 'drivetrain', 'exterior_color', 'interior_color', 'engine', 'engine_type', 'engine_aspiration', 'engine_block', 'miles_range', 'price_range', 'dom_range', 'sort_by', 'sort_order', 'rows', 'start', 'facets', 'stats', 'country', 'plot', 'nodedup', 'state', 'city', 'dealer_name', 'trim_o', 'trim_r', 'dom_active_range', 'dom_180_range', 'options', 'features', 'exclude_certified']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_key' in params:
            query_params.append(('api_key', params['api_key']))  # noqa: E501
        if 'latitude' in params:
            query_params.append(('latitude', params['latitude']))  # noqa: E501
        if 'longitude' in params:
            query_params.append(('longitude', params['longitude']))  # noqa: E501
        if 'radius' in params:
            query_params.append(('radius', params['radius']))  # noqa: E501
        if 'zip' in params:
            query_params.append(('zip', params['zip']))  # noqa: E501
        if 'include_lease' in params:
            query_params.append(('include_lease', params['include_lease']))  # noqa: E501
        if 'include_finance' in params:
            query_params.append(('include_finance', params['include_finance']))  # noqa: E501
        if 'lease_term' in params:
            query_params.append(('lease_term', params['lease_term']))  # noqa: E501
        if 'lease_down_payment' in params:
            query_params.append(('lease_down_payment', params['lease_down_payment']))  # noqa: E501
        if 'lease_emp' in params:
            query_params.append(('lease_emp', params['lease_emp']))  # noqa: E501
        if 'finance_loan_term' in params:
            query_params.append(('finance_loan_term', params['finance_loan_term']))  # noqa: E501
        if 'finance_loan_apr' in params:
            query_params.append(('finance_loan_apr', params['finance_loan_apr']))  # noqa: E501
        if 'finance_emp' in params:
            query_params.append(('finance_emp', params['finance_emp']))  # noqa: E501
        if 'finance_down_payment' in params:
            query_params.append(('finance_down_payment', params['finance_down_payment']))  # noqa: E501
        if 'finance_down_payment_per' in params:
            query_params.append(('finance_down_payment_per', params['finance_down_payment_per']))  # noqa: E501
        if 'car_type' in params:
            query_params.append(('car_type', params['car_type']))  # noqa: E501
        if 'seller_type' in params:
            query_params.append(('seller_type', params['seller_type']))  # noqa: E501
        if 'carfax_1_owner' in params:
            query_params.append(('carfax_1_owner', params['carfax_1_owner']))  # noqa: E501
        if 'carfax_clean_title' in params:
            query_params.append(('carfax_clean_title', params['carfax_clean_title']))  # noqa: E501
        if 'year' in params:
            query_params.append(('year', params['year']))  # noqa: E501
        if 'make' in params:
            query_params.append(('make', params['make']))  # noqa: E501
        if 'model' in params:
            query_params.append(('model', params['model']))  # noqa: E501
        if 'trim' in params:
            query_params.append(('trim', params['trim']))  # noqa: E501
        if 'dealer_id' in params:
            query_params.append(('dealer_id', params['dealer_id']))  # noqa: E501
        if 'vin' in params:
            query_params.append(('vin', params['vin']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'body_type' in params:
            query_params.append(('body_type', params['body_type']))  # noqa: E501
        if 'body_subtype' in params:
            query_params.append(('body_subtype', params['body_subtype']))  # noqa: E501
        if 'vehicle_type' in params:
            query_params.append(('vehicle_type', params['vehicle_type']))  # noqa: E501
        if 'vins' in params:
            query_params.append(('vins', params['vins']))  # noqa: E501
        if 'taxonomy_vins' in params:
            query_params.append(('taxonomy_vins', params['taxonomy_vins']))  # noqa: E501
        if 'ymmt' in params:
            query_params.append(('ymmt', params['ymmt']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501
        if 'cylinders' in params:
            query_params.append(('cylinders', params['cylinders']))  # noqa: E501
        if 'transmission' in params:
            query_params.append(('transmission', params['transmission']))  # noqa: E501
        if 'speeds' in params:
            query_params.append(('speeds', params['speeds']))  # noqa: E501
        if 'doors' in params:
            query_params.append(('doors', params['doors']))  # noqa: E501
        if 'drivetrain' in params:
            query_params.append(('drivetrain', params['drivetrain']))  # noqa: E501
        if 'exterior_color' in params:
            query_params.append(('exterior_color', params['exterior_color']))  # noqa: E501
        if 'interior_color' in params:
            query_params.append(('interior_color', params['interior_color']))  # noqa: E501
        if 'engine' in params:
            query_params.append(('engine', params['engine']))  # noqa: E501
        if 'engine_type' in params:
            query_params.append(('engine_type', params['engine_type']))  # noqa: E501
        if 'engine_aspiration' in params:
            query_params.append(('engine_aspiration', params['engine_aspiration']))  # noqa: E501
        if 'engine_block' in params:
            query_params.append(('engine_block', params['engine_block']))  # noqa: E501
        if 'miles_range' in params:
            query_params.append(('miles_range', params['miles_range']))  # noqa: E501
        if 'price_range' in params:
            query_params.append(('price_range', params['price_range']))  # noqa: E501
        if 'dom_range' in params:
            query_params.append(('dom_range', params['dom_range']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'rows' in params:
            query_params.append(('rows', params['rows']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'facets' in params:
            query_params.append(('facets', params['facets']))  # noqa: E501
        if 'stats' in params:
            query_params.append(('stats', params['stats']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'plot' in params:
            query_params.append(('plot', params['plot']))  # noqa: E501
        if 'nodedup' in params:
            query_params.append(('nodedup', params['nodedup']))  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
        if 'city' in params:
            query_params.append(('city', params['city']))  # noqa: E501
        if 'dealer_name' in params:
            query_params.append(('dealer_name', params['dealer_name']))  # noqa: E501
        if 'trim_o' in params:
            query_params.append(('trim_o', params['trim_o']))  # noqa: E501
        if 'trim_r' in params:
            query_params.append(('trim_r', params['trim_r']))  # noqa: E501
        if 'dom_active_range' in params:
            query_params.append(('dom_active_range', params['dom_active_range']))  # noqa: E501
        if 'dom_180_range' in params:
            query_params.append(('dom_180_range', params['dom_180_range']))  # noqa: E501
        if 'options' in params:
            query_params.append(('options', params['options']))  # noqa: E501
        if 'features' in params:
            query_params.append(('features', params['features']))  # noqa: E501
        if 'exclude_certified' in params:
            query_params.append(('exclude_certified', params['exclude_certified']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
